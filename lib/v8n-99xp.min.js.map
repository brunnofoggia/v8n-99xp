{"version":3,"file":"v8n-99xp.min.js","sources":["../src/v8n-99xp.js"],"sourcesContent":["// [v8n-99xp](https://github.com/brunnofoggia/v8n-99xp) is a set of validation\n// methods based on projects I've been working on using\n// [v8n](https://imbrn.github.io/v8n/). Validations included: email, alpha string, \n// fullname, passwords match, cpf, cnpj, credit card number and validto, renavam, brphone\n\n\n// Baseline setup\n// --------------\nimport v8n from 'v8n';\nimport _ from 'underscore-99xp';\n\n// Custom Regex Validation\nv8n.extend({\n    regex(testRule, replaceRule) {\n        return _.partial(function (tr, rr, v) {\n            var validate = () => {\n                if (!v) {\n                    return false;\n                }\n                v = v.toString();\n\n                if (tr.test(v)) {\n                    return true;\n                }\n\n                return false;\n            };\n\n            if (_.isArray(rr)) {\n                var regex = rr[0],\n                    str = rr[1];\n\n                v = v.replace(regex, str);\n            }\n\n            return validate();\n        }, testRule, replaceRule);\n    }\n});\n\n// Email validation regex based\nv8n.extend({\n    email(expected) {\n        return (value) => {\n            var validate = function (email) {\n                if (!email || typeof email !== 'string') {\n                    return false;\n                }\n\n                if (/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,})+$/.test(email)) {\n                    return true;\n                }\n\n                return false;\n            };\n\n            return validate(value);\n        }\n    }\n});\n\n// Alpha Numeric validation\nv8n.extend({\n    stringAlpha(expected) {\n        return (value) => {\n            var validate = function (s) {\n                if (!s || typeof s !== 'string') {\n                    return false;\n                }\n\n                if (/[a-zA-Z]+/.test(s) && /[0-9]+/.test(s) && !/[^a-zA-Z0-9]+/.test(s)) {\n                    return true;\n                }\n\n                return false;\n            };\n\n            return validate(value);\n        }\n    }\n});\n\n// Fullname validation (reject single names)\nv8n.extend({\n    fullname(expected) {\n        return (value) => {\n            var validate = function (v) {\n                if (!v || typeof v !== 'string') {\n                    return false;\n                }\n\n                var vf = v.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\n                if (/^[a-zA-Z]{2,}(\\s+(([a-zA-Z]{3,})|([a-zA-Z]{2,}\\s+[a-zA-Z]{3,})))+$/.test(vf) &&\n                    !/[bcdfghjklmnpqrstvwxyz]{3,}/.test(vf)) {\n                    return true;\n                }\n\n                return false;\n            };\n\n            return validate(value);\n        }\n    }\n});\n\n// Password match compares two password values\n// It is required to work that you have both with quite the same name, like\n// password and password_1 or password_lorem and passowrd_lorem_1\n// and apply the validation to password_1 because the last _ and everything after\n// it will be removed to get the first field, password in this case\nv8n.extend({\n    passwordMatch(expected) {\n        return (value, attrs) => {\n            var validate = function (data) {\n                if (typeof data !== 'object' || typeof data[0] === 'undefined') {\n                    return true;\n                }\n\n                var [v, a, f] = data;\n\n                var f1 = f.split('_');\n                f1.pop();\n                f1 = f1.join('_');\n\n                if (!v || !a || !(f1 in a)) {\n                    return false;\n                }\n\n                if (v + '' !== a[f1] + '') {\n                    return false;\n                }\n\n                return true;\n            };\n\n            return validate(value, attrs);\n        }\n    }\n});\n\n// CPF Validation (works with or without mask)\nvar validateCPF = function(value) {\n    const mod11 = (num) => num % 11\n    const not = (x) => !x\n    const isEqual = (a) => (b) => b === a\n    const mergeDigits = (num1, num2) => `${num1}${num2}`\n    const getTwoLastDigits = (cpf) => `${cpf[9]}${cpf[10]}`\n    const getCpfToCheckInArray = (cpf) => cpf.substr(0, 9).split('')\n    const generateArray = (length) => Array.from({ length }, (v, k) => k)\n\n    const isIn = (list) => (val) =>\n        list.findIndex(v => val === v) >= 0\n\n    const isSameDigitsCPF = (cpfFull) =>\n        isIn(generateArray(10).map(generateStringSequence(11)))(cpfFull)\n\n    const generateStringSequence = (times) => (char) =>\n        (`${char}`.repeat(times))\n\n    const toSumOfMultiplication = (total) => (result, num, i) =>\n        result + (num * total--)\n\n    const getSumOfMultiplication = (list, total) =>\n        list.reduce(toSumOfMultiplication(total), 0)\n\n    const getValidationDigit = (total) => (cpf) =>\n        getDigit(mod11(getSumOfMultiplication(cpf, total)))\n\n    const getDigit = (num) => (num > 1) ? 11 - num : 0\n\n    const isValidCPF = (cpfFull) => {\n        const cpf = getCpfToCheckInArray(cpfFull)\n        const firstDigit = getValidationDigit(10)(cpf)\n        const secondDigit = getValidationDigit(11)(cpf.concat(firstDigit))\n\n        return isEqual(getTwoLastDigits(cpfFull))(mergeDigits(firstDigit, secondDigit));\n    }\n\n    const validate = (CPF) => CPF.length === 11 && not(isSameDigitsCPF(CPF)) && isValidCPF(CPF)\n\n    return validate(value.replace(/(\\.|\\-)/g, ''));\n\n}\n\nv8n.extend({\n    cpf(expected) {\n        return (value) => {\n            return validateCPF(value.replace(/(\\.|\\-)/g, ''));\n        }\n    }\n});\n\nvar validateCNPJ = function (value) {\n    const mod14 = (num) => num % 14\n    const not = (x) => !x\n    const generateArray = (length) => Array.from({ length }, (v, k) => k)\n\n    const isIn = (list) => (val) => list.findIndex(v => val === v) >= 0;\n\n    const isSameDigitsCNPJ = (cnpjFull) =>\n        isIn(generateArray(10).map(generateStringSequence(14)))(cnpjFull)\n\n    const generateStringSequence = (times) => (char) =>\n        (`${char}`.repeat(times))\n\n    const isValidCNPJ = (cnpj) => {\n        if (!cnpj || mod14(cnpj.length) > 0) {\n            return false;\n        }\n\n        var tamanho, numeros, digitos, soma, pos, i, resultado;\n\n        tamanho = cnpj.length - 2;\n        numeros = cnpj.substring(0, tamanho);\n        digitos = cnpj.substring(tamanho);\n        soma = 0;\n        pos = tamanho - 7;\n        for (i = tamanho; i >= 1; i--) {\n            soma += numeros.charAt(tamanho - i) * pos--;\n            if (pos < 2) {\n                pos = 9;\n            }\n        }\n        resultado = soma % 11 < 2 ? 0 : 11 - soma % 11;\n        if (resultado + '' !== digitos.charAt(0) + '') {\n            return false;\n        }\n        tamanho = tamanho + 1;\n        numeros = cnpj.substring(0, tamanho);\n        soma = 0;\n        pos = tamanho - 7;\n        for (i = tamanho; i >= 1; i--) {\n            soma += numeros.charAt(tamanho - i) * pos--;\n            if (pos < 2) {\n                pos = 9;\n            }\n        }\n        resultado = soma % 11 < 2 ? 0 : 11 - soma % 11;\n        if (resultado + '' !== digitos.charAt(1) + '') {\n            return false;\n        }\n\n        return true;\n    }\n\n    const validate = (CNPJ) => CNPJ.length === 14 && not(isSameDigitsCNPJ(CNPJ)) && isValidCNPJ(CNPJ);\n\n    return validate(value.replace(/(\\.|\\-|\\/)/g, ''));\n};\n\n// CNPJ Validation (works with or without mask)\nv8n.extend({\n    cnpj(expected) {\n        return (value) => {\n            return validateCNPJ(value.replace(/(\\.|\\-|\\/)/g, ''));\n        }\n    }\n});\n\n// CPF / CNPJ Validation (works with or without mask)\nv8n.extend({\n    cpfcnpj(expected) {\n        return (value) => {\n            var v = value.replace(/(\\.|\\-|\\/)/g, '');\n            return v.length === 11 ? validateCPF(v) : validateCNPJ(v);\n        }\n    }\n});\n\n// Credit card number validation - [Reference](https://medium.com/swlh/credit-card-validation-in-javascript-ruby-and-c-4b0a9b245766)\nv8n.extend({\n    creditcard(expected) {\n        return (value) => {\n\n            const sumArrDigits = (array) => {\n                return array.join('').split('').map(e => parseInt(e))\n            };\n\n            const validlen = (arr) => {\n                return arr.length === 13 || arr.length === 15 || arr.length === 16\n            };\n\n            const arrSplit = (cardArray) => {\n                const selectOddValues = cardArray.filter((a, i) => i % 2 === 1);\n                const selectEvenValues = cardArray.filter((a, i) => i % 2 === 0);\n                let arr1;\n                let arr2;\n                if (cardArray.length % 2 === 1) {\n                    arr1 = selectOddValues.map(e => e * 2);\n                    arr2 = selectEvenValues;\n                } else {\n                    arr1 = selectEvenValues.map(e => e * 2);\n                    arr2 = selectOddValues;\n                }\n                return { arr1, arr2 }\n            };\n\n            const isValidCC = (cardNumber) => {\n                const cardArray = cardNumber.toString().split('').map((e) => parseInt(e))\n                validlen(cardArray);\n                const splitArr = arrSplit(cardArray)\n                const checksum = sumArrDigits(splitArr.arr1).reduce((a, c) => a + c) + splitArr.arr2.reduce((a, c) => a + c);\n\n                if (checksum % 10 === 0) {\n                    return true;\n                }\n\n                return false;\n            }\n\n\n            const validate = (cardNumber) => isValidCC(cardNumber);\n\n            return validate(value.replace(/[^0-9]/g, ''));\n        }\n    }\n});\n\n// Credit card validto validation (requires mm/yyyy mask)\nv8n.extend({\n    creditcardValidTo(expected) {\n        return (value) => {\n\n            const isValidDate = (dateStr) => {\n                if (!/^\\d{2}\\/\\d{4}$/.test(dateStr)) {\n                    return false;\n                }\n\n                var [m, y] = dateStr.split('/'),\n                    cY = (new Date()).getFullYear(),\n                    cM = (new Date()).getMonth() + 1;\n\n                if (parseInt(m, 10) < 1 || parseInt(m, 10) > 12) {\n                    return false;\n                }\n                if (parseInt(y, 10) < cY || parseInt(y, 10) > (cY + 10)) {\n                    return false;\n                } else if (parseInt(y, 10) === cY && parseInt(m, 10) < cM) {\n                    return false;\n                }\n\n                return true;\n            }\n\n\n            const validate = (dateStr) => isValidDate(dateStr);\n\n            return validate(value);\n        }\n    }\n});\n\n// Renavam validation - [Reference](https://github.com/eliseuborges/Renavam/blob/master/Renavam.js)\nv8n.extend({\n    renavam(expected) {\n        return (value) => {\n            var validate = function (renavam) {\n                if (!renavam || typeof renavam !== 'string') {\n                    return false;\n                }\n\n                renavam = renavam.padStart(11, '0');\n\n                if (!renavam.match('^[0-9]{11}$')) {\n                    return false;\n                }\n\n                var renavamSemDigito = renavam.substring(0, 10);\n                var renavamReversoSemDigito = renavamSemDigito.split('').reverse().join('');\n\n                var soma = 0;\n                var multiplicador = 2;\n                for (var i = 0; i < 10; i++) {\n                    var algarismo = renavamReversoSemDigito.substring(i, i + 1);\n                    soma += algarismo * multiplicador;\n\n                    if (multiplicador >= 9) {\n                        multiplicador = 2;\n                    } else {\n                        multiplicador++;\n                    }\n                }\n\n                var mod11 = soma % 11;\n                var ultimoDigitoCalculado = 11 - mod11;\n                ultimoDigitoCalculado = (ultimoDigitoCalculado >= 10 ? 0 : ultimoDigitoCalculado);\n                var digitoRealInformado = parseInt(renavam.substring(renavam.length - 1, renavam.length));\n                if (ultimoDigitoCalculado === digitoRealInformado) {\n                    return true;\n                }\n\n                return false;\n\n            };\n\n            return validate(value.replace(/[^0-9]/g, ''));\n        }\n    }\n});\n\n// Phone validation (DDD+Phone, does not work with DDI)\nv8n.extend({\n    brphone(expected) {\n        return (value) => {\n            var validate = function (phone) {\n                if (!phone || typeof phone !== 'string') {\n                    return false;\n                }\n\n                if (/^[0-9]{10,11}$/.test(phone)) {\n                    return true;\n                }\n\n                return false;\n            };\n\n            return validate(value.replace(/[^0-9]/g, ''));\n        }\n    }\n});\n\nexport default v8n;\n"],"names":["v8n","extend","regex","testRule","replaceRule","_","partial","tr","rr","v","isArray","str","replace","toString","test","validate","email","expected","value","stringAlpha","s","fullname","vf","normalize","passwordMatch","attrs","data","a","f","f1","split","pop","join","validateCPF","isSameDigitsCPF","cpfFull","list","val","findIndex","isIn","length","Array","from","k","generateArray","map","generateStringSequence","times","char","repeat","getValidationDigit","total","cpf","getDigit","num","mod11","reduce","result","i","toSumOfMultiplication","getSumOfMultiplication","CPF","x","not","substr","getCpfToCheckInArray","firstDigit","secondDigit","concat","b","isEqual","getTwoLastDigits","num1","num2","mergeDigits","isValidCPF","validateCNPJ","isSameDigitsCNPJ","cnpjFull","CNPJ","cnpj","mod14","tamanho","numeros","digitos","soma","pos","substring","charAt","isValidCNPJ","cpfcnpj","creditcard","isValidCC","cardNumber","cardArray","e","parseInt","arr","validlen","splitArr","selectOddValues","filter","selectEvenValues","arr1","arr2","arrSplit","array","sumArrDigits","c","creditcardValidTo","dateStr","m","y","cY","Date","getFullYear","cM","getMonth","isValidDate","renavam","padStart","match","renavamReversoSemDigito","reverse","multiplicador","ultimoDigitoCalculado","brphone","phone"],"mappings":"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"}