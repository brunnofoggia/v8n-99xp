{"version":3,"file":"v8n-99xp.min.js","sources":["../src/v8n-99xp.js"],"sourcesContent":["// [v8n-99xp](https://github.com/brunnofoggia/v8n-99xp) is a set of validation\n// methods based on projects I've been working on using\n// [v8n](https://imbrn.github.io/v8n/). Validations included: email, alpha string, \n// fullname, passwords match, cpf, cnpj, credit card number and validto, renavam, brphone\n\n\n// Baseline setup\n// --------------\nimport v8n from 'v8n';\n\n// Email validation regex based\nv8n.extend({\n    email(expected) {\n        return (value) => {\n            var validate = function (email) {\n                if (!email || typeof email !== 'string') {\n                    return false;\n                }\n\n                if (/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/.test(email)) {\n                    return true;\n                }\n\n                return false;\n            };\n\n            return validate(value);\n        }\n    }\n});\n\n// Alpha Numeric validation\nv8n.extend({\n    stringAlpha(expected) {\n        return (value) => {\n            var validate = function (s) {\n                if (!s || typeof s !== 'string') {\n                    return false;\n                }\n\n                if (/[a-zA-Z]+/.test(s) && /[0-9]+/.test(s) && !/[^a-zA-Z0-9]+/.test(s)) {\n                    return true;\n                }\n\n                return false;\n            };\n\n            return validate(value);\n        }\n    }\n});\n\n// Fullname validation (reject single names)\nv8n.extend({\n    fullname(expected) {\n        return (value) => {\n            var validate = function (v) {\n                if (!v || typeof v !== 'string') {\n                    return false;\n                }\n\n                var vf = v.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\n                if (/^[a-zA-Z]{2,}(\\s+(([a-zA-Z]{3,})|([a-zA-Z]{2,}\\s+[a-zA-Z]{3,})))+$/.test(vf) &&\n                        !/[bcdfghjklmnpqrstvwxyz]{3,}/.test(vf)) {\n                    return true;\n                }\n\n                return false;\n            };\n\n            return validate(value);\n        }\n    }\n});\n\n// Password match compares two password values\n// It is required to work that you have both with quite the same name, like\n// password and password_1 or password_lorem and passowrd_lorem_1\n// and apply the validation to password_1 because the last _ and everything after\n// it will be removed to get the first field, password in this case\nv8n.extend({\n    passwordMatch(expected) {\n        return (value, attrs) => {\n            var validate = function (data) {\n                if (typeof (data) !== 'object') {\n                    return true;\n                }\n\n                var [v, a, f] = data;\n\n                var f1 = f.split('_');\n                f1.pop();\n                f1 = f1.join('_');\n\n                if (!v || !a || !(f1 in a)) {\n                    return false;\n                }\n\n                if (v + '' !== a[f1] + '') {\n                    return false;\n                }\n\n                return true;\n            };\n\n            return validate(value, attrs);\n        }\n    }\n});\n\n// CPF Validation (works with or without mask)\nv8n.extend({\n    cpf(expected) {\n        return (value) => {\n            const mod11 = (num) => num % 11\n            const not = (x) => !x\n            const isEqual = (a) => (b) => b === a\n            const mergeDigits = (num1, num2) => `${num1}${num2}`\n            const getTwoLastDigits = (cpf) => `${cpf[ 9 ]}${cpf[ 10 ]}`\n            const getCpfToCheckInArray = (cpf) => cpf.substr(0, 9).split('')\n            const generateArray = (length) => Array.from({length}, (v, k) => k)\n\n            const isIn = (list) => (val) =>\n                    list.findIndex(v => val === v) >= 0\n\n            const isSameDigitsCPF = (cpfFull) =>\n                isIn(generateArray(10).map(generateStringSequence(11)))(cpfFull)\n\n            const generateStringSequence = (times) => (char) =>\n                    (`${char}`.repeat(times))\n\n            const toSumOfMultiplication = (total) => (result, num, i) =>\n                    result + (num * total--)\n\n            const getSumOfMultiplication = (list, total) =>\n                list.reduce(toSumOfMultiplication(total), 0)\n\n            const getValidationDigit = (total) => (cpf) =>\n                    getDigit(mod11(getSumOfMultiplication(cpf, total)))\n\n            const getDigit = (num) => (num > 1) ? 11 - num : 0\n\n            const isValidCPF = (cpfFull) => {\n                const cpf = getCpfToCheckInArray(cpfFull)\n                const firstDigit = getValidationDigit(10)(cpf)\n                const secondDigit = getValidationDigit(11)(cpf.concat(firstDigit))\n\n                return isEqual(getTwoLastDigits(cpfFull))(mergeDigits(firstDigit, secondDigit));\n            }\n\n            const validate = (CPF) => not(isSameDigitsCPF(CPF)) && isValidCPF(CPF)\n\n            return validate(value.replace(/(\\.|\\-)/g, ''));\n        }\n    }\n});\n\n// CNPJ Validation (works with or without mask)\nv8n.extend({\n    cnpj(expected) {\n        return (value) => {\n            const mod14 = (num) => num % 14\n            const not = (x) => !x\n            const generateArray = (length) => Array.from({length}, (v, k) => k)\n\n            const isIn = (list) => (val) => list.findIndex(v => val === v) >= 0;\n\n            const isSameDigitsCNPJ = (cnpjFull) =>\n                isIn(generateArray(10).map(generateStringSequence(14)))(cnpjFull)\n\n            const generateStringSequence = (times) => (char) =>\n                    (`${char}`.repeat(times))\n\n            const isValidCNPJ = (cnpj) => {\n                if (!cnpj || mod14(cnpj.length) > 0) {\n                    return false;\n                }\n\n                var tamanho, numeros, digitos, soma, pos, i, resultado;\n\n                tamanho = cnpj.length - 2;\n                numeros = cnpj.substring(0, tamanho);\n                digitos = cnpj.substring(tamanho);\n                soma = 0;\n                pos = tamanho - 7;\n                for (i = tamanho; i >= 1; i--) {\n                    soma += numeros.charAt(tamanho - i) * pos--;\n                    if (pos < 2) {\n                        pos = 9;\n                    }\n                }\n                resultado = soma % 11 < 2 ? 0 : 11 - soma % 11;\n                if (resultado + '' !== digitos.charAt(0) + '') {\n                    return false;\n                }\n                tamanho = tamanho + 1;\n                numeros = cnpj.substring(0, tamanho);\n                soma = 0;\n                pos = tamanho - 7;\n                for (i = tamanho; i >= 1; i--) {\n                    soma += numeros.charAt(tamanho - i) * pos--;\n                    if (pos < 2) {\n                        pos = 9;\n                    }\n                }\n                resultado = soma % 11 < 2 ? 0 : 11 - soma % 11;\n                if (resultado + '' !== digitos.charAt(1) + '') {\n                    return false;\n                }\n\n                return true;\n            }\n\n            const validate = (CNPJ) => not(isSameDigitsCNPJ(CNPJ)) && isValidCNPJ(CNPJ);\n\n            return validate(value.replace(/(\\.|\\-|\\/)/g, ''));\n        }\n    }\n});\n\n// Credit card number validation - [Reference](https://medium.com/swlh/credit-card-validation-in-javascript-ruby-and-c-4b0a9b245766)\nv8n.extend({\n    creditcard(expected) {\n        return (value) => {\n\n            const sumArrDigits = (array) => {\n                return array.join('').split('').map(e => parseInt(e))\n            };\n\n            const validlen = (arr) => {\n                return arr.length === 13 || arr.length === 15 || arr.length === 16\n            };\n\n            const arrSplit = (cardArray) => {\n                const selectOddValues = cardArray.filter((a, i) => i % 2 === 1);\n                const selectEvenValues = cardArray.filter((a, i) => i % 2 === 0);\n                let arr1;\n                let arr2;\n                if (cardArray.length % 2 === 1) {\n                    arr1 = selectOddValues.map(e => e * 2);\n                    arr2 = selectEvenValues;\n                } else {\n                    arr1 = selectEvenValues.map(e => e * 2);\n                    arr2 = selectOddValues;\n                }\n                return {arr1, arr2}\n            };\n\n            const isValidCC = (cardNumber) => {\n                const cardArray = cardNumber.toString().split('').map((e) => parseInt(e))\n                validlen(cardArray);\n                const splitArr = arrSplit(cardArray)\n                const checksum = sumArrDigits(splitArr.arr1).reduce((a, c) => a + c) + splitArr.arr2.reduce((a, c) => a + c);\n\n                if (checksum % 10 === 0) {\n                    return true;\n                }\n\n                return false;\n            }\n\n\n            const validate = (cardNumber) => isValidCC(cardNumber);\n\n            return validate(value.replace(/[^0-9]/g, ''));\n        }\n    }\n});\n\n// Credit card validto validation (requires mm/yyyy mask)\nv8n.extend({\n    creditcardValidTo(expected) {\n        return (value) => {\n\n            const isValidDate = (dateStr) => {\n                if (!/^\\d{2}\\/\\d{4}$/.test(dateStr)) {\n                    return false;\n                }\n\n                var [m, y] = dateStr.split('/'),\n                cY = (new Date()).getFullYear(),\n                        cM = (new Date()).getMonth() + 1;\n\n                if (parseInt(m, 10) < 1 || parseInt(m, 10) > 12) {\n                    return false;\n                }\n                if (parseInt(y, 10) < cY || parseInt(y, 10) > (cY + 10)) {\n                    return false;\n                } else if (parseInt(y, 10) === cY && parseInt(m, 10) < cM) {\n                    return false;\n                }\n\n                return true;\n            }\n\n\n            const validate = (dateStr) => isValidDate(dateStr);\n\n            return validate(value);\n        }\n    }\n});\n\n// Renavam validation - [Reference](https://github.com/eliseuborges/Renavam/blob/master/Renavam.js)\nv8n.extend({\n    renavam(expected) {\n        return (value) => {\n            var validate = function (renavam) {\n                if (!renavam || typeof renavam !== 'string') {\n                    return false;\n                }\n\n                renavam = renavam.padStart(11, '0');\n\n                if (!renavam.match('^[0-9]{11}$')) {\n                    return false;\n                }\n\n                var renavamSemDigito = renavam.substring(0, 10);\n                var renavamReversoSemDigito = renavamSemDigito.split('').reverse().join('');\n\n                var soma = 0;\n                var multiplicador = 2;\n                for (var i = 0; i < 10; i++) {\n                    var algarismo = renavamReversoSemDigito.substring(i, i + 1);\n                    soma += algarismo * multiplicador;\n\n                    if (multiplicador >= 9) {\n                        multiplicador = 2;\n                    } else {\n                        multiplicador++;\n                    }\n                }\n\n                var mod11 = soma % 11;\n                var ultimoDigitoCalculado = 11 - mod11;\n                ultimoDigitoCalculado = (ultimoDigitoCalculado >= 10 ? 0 : ultimoDigitoCalculado);\n                var digitoRealInformado = parseInt(renavam.substring(renavam.length - 1, renavam.length));\n                if (ultimoDigitoCalculado === digitoRealInformado) {\n                    return true;\n                }\n\n                return false;\n\n            };\n\n            return validate(value.replace(/[^0-9]/g, ''));\n        }\n    }\n});\n\n// Phone validation (DDD+Phone, does not work with DDI)\nv8n.extend({\n    brphone(expected) {\n        return (value) => {\n            var validate = function (phone) {\n                if (!phone || typeof phone !== 'string') {\n                    return false;\n                }\n\n                if (/^[0-9]{10,11}$/.test(phone)) {\n                    return true;\n                }\n\n                return false;\n            };\n\n            return validate(value.replace(/[^0-9]/g, ''));\n        }\n    }\n});\n\nexport default v8n;\n"],"names":["extend","email","expected","value","test","v8n","stringAlpha","s","fullname","v","vf","normalize","replace","validate","passwordMatch","attrs","data","_typeof","a","f1","split","pop","join","cpf","CPF","cpfFull","num2","firstDigit","secondDigit","isSameDigitsCPF","list","length","Array","from","k","map","generateStringSequence","val","findIndex","times","char","repeat","getValidationDigit","total","getDigit","reduce","result","num","i","toSumOfMultiplication","getSumOfMultiplication","substr","getCpfToCheckInArray","concat","getTwoLastDigits","b","cnpj","CNPJ","isSameDigitsCNPJ","cnpjFull","tamanho","numeros","digitos","soma","pos","substring","charAt","isValidCNPJ","creditcard","cardNumber","isValidCC","arr","cardArray","toString","e","parseInt","array","splitArr","arr1","arr2","selectOddValues","filter","selectEvenValues","arrSplit","c","creditcardValidTo","dateStr","m","y","cY","Date","getFullYear","cM","getMonth","isValidDate","renavam","padStart","match","renavamReversoSemDigito","reverse","multiplicador","ultimoDigitoCalculado","brphone","phone"],"mappings":"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"}