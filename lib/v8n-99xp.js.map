{"version":3,"file":"v8n-99xp.js","sources":["../src/v8n-99xp.js"],"sourcesContent":["// [v8n-99xp](https://github.com/brunnofoggia/v8n-99xp) is a set of validation\n// methods based on projects I've been working on using\n// [v8n](https://imbrn.github.io/v8n/). Validations included: email, alpha string, \n// fullname, passwords match, cpf, cnpj, credit card number and validto, renavam, brphone\n\n\n// Baseline setup\n// --------------\nimport v8n from 'v8n';\nimport _ from 'underscore-99xp';\n\n// Custom Regex Validation\nv8n.extend({\n    regex(testRule, replaceRule) {\n        return _.partial(function (tr, rr, v) {\n            var validate = () => {\n                if (!v) {\n                    return false;\n                }\n                v = v.toString();\n\n                if (tr.test(v)) {\n                    return true;\n                }\n\n                return false;\n            };\n\n            if (_.isArray(rr)) {\n                var regex = rr[0],\n                    str = rr[1];\n\n                v = v.replace(regex, str);\n            }\n\n            return validate();\n        }, testRule, replaceRule);\n    }\n});\n\n// Email validation regex based\nv8n.extend({\n    email(expected) {\n        return (value) => {\n            var validate = function (email) {\n                if (!email || typeof email !== 'string') {\n                    return false;\n                }\n\n                if (/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/.test(email)) {\n                    return true;\n                }\n\n                return false;\n            };\n\n            return validate(value);\n        }\n    }\n});\n\n// Alpha Numeric validation\nv8n.extend({\n    stringAlpha(expected) {\n        return (value) => {\n            var validate = function (s) {\n                if (!s || typeof s !== 'string') {\n                    return false;\n                }\n\n                if (/[a-zA-Z]+/.test(s) && /[0-9]+/.test(s) && !/[^a-zA-Z0-9]+/.test(s)) {\n                    return true;\n                }\n\n                return false;\n            };\n\n            return validate(value);\n        }\n    }\n});\n\n// Fullname validation (reject single names)\nv8n.extend({\n    fullname(expected) {\n        return (value) => {\n            var validate = function (v) {\n                if (!v || typeof v !== 'string') {\n                    return false;\n                }\n\n                var vf = v.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\n                if (/^[a-zA-Z]{2,}(\\s+(([a-zA-Z]{3,})|([a-zA-Z]{2,}\\s+[a-zA-Z]{3,})))+$/.test(vf) &&\n                    !/[bcdfghjklmnpqrstvwxyz]{3,}/.test(vf)) {\n                    return true;\n                }\n\n                return false;\n            };\n\n            return validate(value);\n        }\n    }\n});\n\n// Password match compares two password values\n// It is required to work that you have both with quite the same name, like\n// password and password_1 or password_lorem and passowrd_lorem_1\n// and apply the validation to password_1 because the last _ and everything after\n// it will be removed to get the first field, password in this case\nv8n.extend({\n    passwordMatch(expected) {\n        return (value, attrs) => {\n            var validate = function (data) {\n                if (typeof data !== 'object' || typeof data[0] === 'undefined') {\n                    return true;\n                }\n\n                var [v, a, f] = data;\n\n                var f1 = f.split('_');\n                f1.pop();\n                f1 = f1.join('_');\n\n                if (!v || !a || !(f1 in a)) {\n                    return false;\n                }\n\n                if (v + '' !== a[f1] + '') {\n                    return false;\n                }\n\n                return true;\n            };\n\n            return validate(value, attrs);\n        }\n    }\n});\n\n// CPF Validation (works with or without mask)\nv8n.extend({\n    cpf(expected) {\n        return (value) => {\n            const mod11 = (num) => num % 11\n            const not = (x) => !x\n            const isEqual = (a) => (b) => b === a\n            const mergeDigits = (num1, num2) => `${num1}${num2}`\n            const getTwoLastDigits = (cpf) => `${cpf[9]}${cpf[10]}`\n            const getCpfToCheckInArray = (cpf) => cpf.substr(0, 9).split('')\n            const generateArray = (length) => Array.from({ length }, (v, k) => k)\n\n            const isIn = (list) => (val) =>\n                list.findIndex(v => val === v) >= 0\n\n            const isSameDigitsCPF = (cpfFull) =>\n                isIn(generateArray(10).map(generateStringSequence(11)))(cpfFull)\n\n            const generateStringSequence = (times) => (char) =>\n                (`${char}`.repeat(times))\n\n            const toSumOfMultiplication = (total) => (result, num, i) =>\n                result + (num * total--)\n\n            const getSumOfMultiplication = (list, total) =>\n                list.reduce(toSumOfMultiplication(total), 0)\n\n            const getValidationDigit = (total) => (cpf) =>\n                getDigit(mod11(getSumOfMultiplication(cpf, total)))\n\n            const getDigit = (num) => (num > 1) ? 11 - num : 0\n\n            const isValidCPF = (cpfFull) => {\n                const cpf = getCpfToCheckInArray(cpfFull)\n                const firstDigit = getValidationDigit(10)(cpf)\n                const secondDigit = getValidationDigit(11)(cpf.concat(firstDigit))\n\n                return isEqual(getTwoLastDigits(cpfFull))(mergeDigits(firstDigit, secondDigit));\n            }\n\n            const validate = (CPF) => not(isSameDigitsCPF(CPF)) && isValidCPF(CPF)\n\n            return validate(value.replace(/(\\.|\\-)/g, ''));\n        }\n    }\n});\n\n// CNPJ Validation (works with or without mask)\nv8n.extend({\n    cnpj(expected) {\n        return (value) => {\n            const mod14 = (num) => num % 14\n            const not = (x) => !x\n            const generateArray = (length) => Array.from({ length }, (v, k) => k)\n\n            const isIn = (list) => (val) => list.findIndex(v => val === v) >= 0;\n\n            const isSameDigitsCNPJ = (cnpjFull) =>\n                isIn(generateArray(10).map(generateStringSequence(14)))(cnpjFull)\n\n            const generateStringSequence = (times) => (char) =>\n                (`${char}`.repeat(times))\n\n            const isValidCNPJ = (cnpj) => {\n                if (!cnpj || mod14(cnpj.length) > 0) {\n                    return false;\n                }\n\n                var tamanho, numeros, digitos, soma, pos, i, resultado;\n\n                tamanho = cnpj.length - 2;\n                numeros = cnpj.substring(0, tamanho);\n                digitos = cnpj.substring(tamanho);\n                soma = 0;\n                pos = tamanho - 7;\n                for (i = tamanho; i >= 1; i--) {\n                    soma += numeros.charAt(tamanho - i) * pos--;\n                    if (pos < 2) {\n                        pos = 9;\n                    }\n                }\n                resultado = soma % 11 < 2 ? 0 : 11 - soma % 11;\n                if (resultado + '' !== digitos.charAt(0) + '') {\n                    return false;\n                }\n                tamanho = tamanho + 1;\n                numeros = cnpj.substring(0, tamanho);\n                soma = 0;\n                pos = tamanho - 7;\n                for (i = tamanho; i >= 1; i--) {\n                    soma += numeros.charAt(tamanho - i) * pos--;\n                    if (pos < 2) {\n                        pos = 9;\n                    }\n                }\n                resultado = soma % 11 < 2 ? 0 : 11 - soma % 11;\n                if (resultado + '' !== digitos.charAt(1) + '') {\n                    return false;\n                }\n\n                return true;\n            }\n\n            const validate = (CNPJ) => not(isSameDigitsCNPJ(CNPJ)) && isValidCNPJ(CNPJ);\n\n            return validate(value.replace(/(\\.|\\-|\\/)/g, ''));\n        }\n    }\n});\n\n// Credit card number validation - [Reference](https://medium.com/swlh/credit-card-validation-in-javascript-ruby-and-c-4b0a9b245766)\nv8n.extend({\n    creditcard(expected) {\n        return (value) => {\n\n            const sumArrDigits = (array) => {\n                return array.join('').split('').map(e => parseInt(e))\n            };\n\n            const validlen = (arr) => {\n                return arr.length === 13 || arr.length === 15 || arr.length === 16\n            };\n\n            const arrSplit = (cardArray) => {\n                const selectOddValues = cardArray.filter((a, i) => i % 2 === 1);\n                const selectEvenValues = cardArray.filter((a, i) => i % 2 === 0);\n                let arr1;\n                let arr2;\n                if (cardArray.length % 2 === 1) {\n                    arr1 = selectOddValues.map(e => e * 2);\n                    arr2 = selectEvenValues;\n                } else {\n                    arr1 = selectEvenValues.map(e => e * 2);\n                    arr2 = selectOddValues;\n                }\n                return { arr1, arr2 }\n            };\n\n            const isValidCC = (cardNumber) => {\n                const cardArray = cardNumber.toString().split('').map((e) => parseInt(e))\n                validlen(cardArray);\n                const splitArr = arrSplit(cardArray)\n                const checksum = sumArrDigits(splitArr.arr1).reduce((a, c) => a + c) + splitArr.arr2.reduce((a, c) => a + c);\n\n                if (checksum % 10 === 0) {\n                    return true;\n                }\n\n                return false;\n            }\n\n\n            const validate = (cardNumber) => isValidCC(cardNumber);\n\n            return validate(value.replace(/[^0-9]/g, ''));\n        }\n    }\n});\n\n// Credit card validto validation (requires mm/yyyy mask)\nv8n.extend({\n    creditcardValidTo(expected) {\n        return (value) => {\n\n            const isValidDate = (dateStr) => {\n                if (!/^\\d{2}\\/\\d{4}$/.test(dateStr)) {\n                    return false;\n                }\n\n                var [m, y] = dateStr.split('/'),\n                    cY = (new Date()).getFullYear(),\n                    cM = (new Date()).getMonth() + 1;\n\n                if (parseInt(m, 10) < 1 || parseInt(m, 10) > 12) {\n                    return false;\n                }\n                if (parseInt(y, 10) < cY || parseInt(y, 10) > (cY + 10)) {\n                    return false;\n                } else if (parseInt(y, 10) === cY && parseInt(m, 10) < cM) {\n                    return false;\n                }\n\n                return true;\n            }\n\n\n            const validate = (dateStr) => isValidDate(dateStr);\n\n            return validate(value);\n        }\n    }\n});\n\n// Renavam validation - [Reference](https://github.com/eliseuborges/Renavam/blob/master/Renavam.js)\nv8n.extend({\n    renavam(expected) {\n        return (value) => {\n            var validate = function (renavam) {\n                if (!renavam || typeof renavam !== 'string') {\n                    return false;\n                }\n\n                renavam = renavam.padStart(11, '0');\n\n                if (!renavam.match('^[0-9]{11}$')) {\n                    return false;\n                }\n\n                var renavamSemDigito = renavam.substring(0, 10);\n                var renavamReversoSemDigito = renavamSemDigito.split('').reverse().join('');\n\n                var soma = 0;\n                var multiplicador = 2;\n                for (var i = 0; i < 10; i++) {\n                    var algarismo = renavamReversoSemDigito.substring(i, i + 1);\n                    soma += algarismo * multiplicador;\n\n                    if (multiplicador >= 9) {\n                        multiplicador = 2;\n                    } else {\n                        multiplicador++;\n                    }\n                }\n\n                var mod11 = soma % 11;\n                var ultimoDigitoCalculado = 11 - mod11;\n                ultimoDigitoCalculado = (ultimoDigitoCalculado >= 10 ? 0 : ultimoDigitoCalculado);\n                var digitoRealInformado = parseInt(renavam.substring(renavam.length - 1, renavam.length));\n                if (ultimoDigitoCalculado === digitoRealInformado) {\n                    return true;\n                }\n\n                return false;\n\n            };\n\n            return validate(value.replace(/[^0-9]/g, ''));\n        }\n    }\n});\n\n// Phone validation (DDD+Phone, does not work with DDI)\nv8n.extend({\n    brphone(expected) {\n        return (value) => {\n            var validate = function (phone) {\n                if (!phone || typeof phone !== 'string') {\n                    return false;\n                }\n\n                if (/^[0-9]{10,11}$/.test(phone)) {\n                    return true;\n                }\n\n                return false;\n            };\n\n            return validate(value.replace(/[^0-9]/g, ''));\n        }\n    }\n});\n\nexport default v8n;\n"],"names":["v8n","extend","regex","testRule","replaceRule","_","partial","tr","rr","v","validate","toString","test","isArray","str","replace","email","expected","value","stringAlpha","s","fullname","vf","normalize","passwordMatch","attrs","data","a","f","f1","split","pop","join","cpf","mod11","num","not","x","isEqual","b","mergeDigits","num1","num2","getTwoLastDigits","getCpfToCheckInArray","substr","generateArray","length","Array","from","k","isIn","list","val","findIndex","isSameDigitsCPF","cpfFull","map","generateStringSequence","times","char","repeat","toSumOfMultiplication","total","result","i","getSumOfMultiplication","reduce","getValidationDigit","getDigit","isValidCPF","firstDigit","secondDigit","concat","CPF","cnpj","mod14","isSameDigitsCNPJ","cnpjFull","isValidCNPJ","tamanho","numeros","digitos","soma","pos","resultado","substring","charAt","CNPJ","creditcard","sumArrDigits","array","e","parseInt","validlen","arr","arrSplit","cardArray","selectOddValues","filter","selectEvenValues","arr1","arr2","isValidCC","cardNumber","splitArr","checksum","c","creditcardValidTo","isValidDate","dateStr","m","y","cY","Date","getFullYear","cM","getMonth","renavam","padStart","match","renavamSemDigito","renavamReversoSemDigito","reverse","multiplicador","algarismo","ultimoDigitoCalculado","digitoRealInformado","brphone","phone"],"mappings":"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"}