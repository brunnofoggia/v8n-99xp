{"version":3,"file":"v8n-99xp.js","sources":["../src/v8n-99xp.js"],"sourcesContent":["// [v8n-99xp](https://github.com/brunnofoggia/v8n-99xp) is a set of validation\n// methods based on projects I've been working on using\n// [v8n](https://imbrn.github.io/v8n/). Validations included: email, alpha string, \n// fullname, passwords match, cpf, cnpj, credit card number and validto, renavam, brphone\n\n\n// Baseline setup\n// --------------\nimport v8n from 'v8n';\n\n// Email validation regex based\nv8n.extend({\n    email(expected) {\n        return (value) => {\n            var validate = function (email) {\n                if (!email || typeof email !== 'string') {\n                    return false;\n                }\n\n                if (/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/.test(email)) {\n                    return true;\n                }\n\n                return false;\n            };\n\n            return validate(value);\n        }\n    }\n});\n\n// Alpha Numeric validation\nv8n.extend({\n    stringAlpha(expected) {\n        return (value) => {\n            var validate = function (s) {\n                if (!s || typeof s !== 'string') {\n                    return false;\n                }\n\n                if (/[a-zA-Z]+/.test(s) && /[0-9]+/.test(s) && !/[^a-zA-Z0-9]+/.test(s)) {\n                    return true;\n                }\n\n                return false;\n            };\n\n            return validate(value);\n        }\n    }\n});\n\n// Fullname validation (reject single names)\nv8n.extend({\n    fullname(expected) {\n        return (value) => {\n            var validate = function (v) {\n                if (!v || typeof v !== 'string') {\n                    return false;\n                }\n\n                var vf = v.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\n                if (/^[a-zA-Z]{2,}(\\s+(([a-zA-Z]{3,})|([a-zA-Z]{2,}\\s+[a-zA-Z]{3,})))+$/.test(vf) &&\n                        !/[bcdfghjklmnpqrstvwxyz]{3,}/.test(vf)) {\n                    return true;\n                }\n\n                return false;\n            };\n\n            return validate(value);\n        }\n    }\n});\n\n// Password match compares two password values\n// It is required to work that you have both with quite the same name, like\n// password and password_1 or password_lorem and passowrd_lorem_1\n// and apply the validation to password_1 because the last _ and everything after\n// it will be removed to get the first field, password in this case\nv8n.extend({\n    passwordMatch(expected) {\n        return (value, attrs) => {\n            var validate = function (data) {\n                if (_typeof(data) !== 'object' || typeof data[0] === 'undefined') {\n                    return true;\n                }\n\n                var [v, a, f] = data;\n\n                var f1 = f.split('_');\n                f1.pop();\n                f1 = f1.join('_');\n\n                if (!v || !a || !(f1 in a)) {\n                    return false;\n                }\n\n                if (v + '' !== a[f1] + '') {\n                    return false;\n                }\n\n                return true;\n            };\n\n            return validate(value, attrs);\n        }\n    }\n});\n\n// CPF Validation (works with or without mask)\nv8n.extend({\n    cpf(expected) {\n        return (value) => {\n            const mod11 = (num) => num % 11\n            const not = (x) => !x\n            const isEqual = (a) => (b) => b === a\n            const mergeDigits = (num1, num2) => `${num1}${num2}`\n            const getTwoLastDigits = (cpf) => `${cpf[ 9 ]}${cpf[ 10 ]}`\n            const getCpfToCheckInArray = (cpf) => cpf.substr(0, 9).split('')\n            const generateArray = (length) => Array.from({length}, (v, k) => k)\n\n            const isIn = (list) => (val) =>\n                    list.findIndex(v => val === v) >= 0\n\n            const isSameDigitsCPF = (cpfFull) =>\n                isIn(generateArray(10).map(generateStringSequence(11)))(cpfFull)\n\n            const generateStringSequence = (times) => (char) =>\n                    (`${char}`.repeat(times))\n\n            const toSumOfMultiplication = (total) => (result, num, i) =>\n                    result + (num * total--)\n\n            const getSumOfMultiplication = (list, total) =>\n                list.reduce(toSumOfMultiplication(total), 0)\n\n            const getValidationDigit = (total) => (cpf) =>\n                    getDigit(mod11(getSumOfMultiplication(cpf, total)))\n\n            const getDigit = (num) => (num > 1) ? 11 - num : 0\n\n            const isValidCPF = (cpfFull) => {\n                const cpf = getCpfToCheckInArray(cpfFull)\n                const firstDigit = getValidationDigit(10)(cpf)\n                const secondDigit = getValidationDigit(11)(cpf.concat(firstDigit))\n\n                return isEqual(getTwoLastDigits(cpfFull))(mergeDigits(firstDigit, secondDigit));\n            }\n\n            const validate = (CPF) => not(isSameDigitsCPF(CPF)) && isValidCPF(CPF)\n\n            return validate(value.replace(/(\\.|\\-)/g, ''));\n        }\n    }\n});\n\n// CNPJ Validation (works with or without mask)\nv8n.extend({\n    cnpj(expected) {\n        return (value) => {\n            const mod14 = (num) => num % 14\n            const not = (x) => !x\n            const generateArray = (length) => Array.from({length}, (v, k) => k)\n\n            const isIn = (list) => (val) => list.findIndex(v => val === v) >= 0;\n\n            const isSameDigitsCNPJ = (cnpjFull) =>\n                isIn(generateArray(10).map(generateStringSequence(14)))(cnpjFull)\n\n            const generateStringSequence = (times) => (char) =>\n                    (`${char}`.repeat(times))\n\n            const isValidCNPJ = (cnpj) => {\n                if (!cnpj || mod14(cnpj.length) > 0) {\n                    return false;\n                }\n\n                var tamanho, numeros, digitos, soma, pos, i, resultado;\n\n                tamanho = cnpj.length - 2;\n                numeros = cnpj.substring(0, tamanho);\n                digitos = cnpj.substring(tamanho);\n                soma = 0;\n                pos = tamanho - 7;\n                for (i = tamanho; i >= 1; i--) {\n                    soma += numeros.charAt(tamanho - i) * pos--;\n                    if (pos < 2) {\n                        pos = 9;\n                    }\n                }\n                resultado = soma % 11 < 2 ? 0 : 11 - soma % 11;\n                if (resultado + '' !== digitos.charAt(0) + '') {\n                    return false;\n                }\n                tamanho = tamanho + 1;\n                numeros = cnpj.substring(0, tamanho);\n                soma = 0;\n                pos = tamanho - 7;\n                for (i = tamanho; i >= 1; i--) {\n                    soma += numeros.charAt(tamanho - i) * pos--;\n                    if (pos < 2) {\n                        pos = 9;\n                    }\n                }\n                resultado = soma % 11 < 2 ? 0 : 11 - soma % 11;\n                if (resultado + '' !== digitos.charAt(1) + '') {\n                    return false;\n                }\n\n                return true;\n            }\n\n            const validate = (CNPJ) => not(isSameDigitsCNPJ(CNPJ)) && isValidCNPJ(CNPJ);\n\n            return validate(value.replace(/(\\.|\\-|\\/)/g, ''));\n        }\n    }\n});\n\n// Credit card number validation - [Reference](https://medium.com/swlh/credit-card-validation-in-javascript-ruby-and-c-4b0a9b245766)\nv8n.extend({\n    creditcard(expected) {\n        return (value) => {\n\n            const sumArrDigits = (array) => {\n                return array.join('').split('').map(e => parseInt(e))\n            };\n\n            const validlen = (arr) => {\n                return arr.length === 13 || arr.length === 15 || arr.length === 16\n            };\n\n            const arrSplit = (cardArray) => {\n                const selectOddValues = cardArray.filter((a, i) => i % 2 === 1);\n                const selectEvenValues = cardArray.filter((a, i) => i % 2 === 0);\n                let arr1;\n                let arr2;\n                if (cardArray.length % 2 === 1) {\n                    arr1 = selectOddValues.map(e => e * 2);\n                    arr2 = selectEvenValues;\n                } else {\n                    arr1 = selectEvenValues.map(e => e * 2);\n                    arr2 = selectOddValues;\n                }\n                return {arr1, arr2}\n            };\n\n            const isValidCC = (cardNumber) => {\n                const cardArray = cardNumber.toString().split('').map((e) => parseInt(e))\n                validlen(cardArray);\n                const splitArr = arrSplit(cardArray)\n                const checksum = sumArrDigits(splitArr.arr1).reduce((a, c) => a + c) + splitArr.arr2.reduce((a, c) => a + c);\n\n                if (checksum % 10 === 0) {\n                    return true;\n                }\n\n                return false;\n            }\n\n\n            const validate = (cardNumber) => isValidCC(cardNumber);\n\n            return validate(value.replace(/[^0-9]/g, ''));\n        }\n    }\n});\n\n// Credit card validto validation (requires mm/yyyy mask)\nv8n.extend({\n    creditcardValidTo(expected) {\n        return (value) => {\n\n            const isValidDate = (dateStr) => {\n                if (!/^\\d{2}\\/\\d{4}$/.test(dateStr)) {\n                    return false;\n                }\n\n                var [m, y] = dateStr.split('/'),\n                cY = (new Date()).getFullYear(),\n                        cM = (new Date()).getMonth() + 1;\n\n                if (parseInt(m, 10) < 1 || parseInt(m, 10) > 12) {\n                    return false;\n                }\n                if (parseInt(y, 10) < cY || parseInt(y, 10) > (cY + 10)) {\n                    return false;\n                } else if (parseInt(y, 10) === cY && parseInt(m, 10) < cM) {\n                    return false;\n                }\n\n                return true;\n            }\n\n\n            const validate = (dateStr) => isValidDate(dateStr);\n\n            return validate(value);\n        }\n    }\n});\n\n// Renavam validation - [Reference](https://github.com/eliseuborges/Renavam/blob/master/Renavam.js)\nv8n.extend({\n    renavam(expected) {\n        return (value) => {\n            var validate = function (renavam) {\n                if (!renavam || typeof renavam !== 'string') {\n                    return false;\n                }\n\n                renavam = renavam.padStart(11, '0');\n\n                if (!renavam.match('^[0-9]{11}$')) {\n                    return false;\n                }\n\n                var renavamSemDigito = renavam.substring(0, 10);\n                var renavamReversoSemDigito = renavamSemDigito.split('').reverse().join('');\n\n                var soma = 0;\n                var multiplicador = 2;\n                for (var i = 0; i < 10; i++) {\n                    var algarismo = renavamReversoSemDigito.substring(i, i + 1);\n                    soma += algarismo * multiplicador;\n\n                    if (multiplicador >= 9) {\n                        multiplicador = 2;\n                    } else {\n                        multiplicador++;\n                    }\n                }\n\n                var mod11 = soma % 11;\n                var ultimoDigitoCalculado = 11 - mod11;\n                ultimoDigitoCalculado = (ultimoDigitoCalculado >= 10 ? 0 : ultimoDigitoCalculado);\n                var digitoRealInformado = parseInt(renavam.substring(renavam.length - 1, renavam.length));\n                if (ultimoDigitoCalculado === digitoRealInformado) {\n                    return true;\n                }\n\n                return false;\n\n            };\n\n            return validate(value.replace(/[^0-9]/g, ''));\n        }\n    }\n});\n\n// Phone validation (DDD+Phone, does not work with DDI)\nv8n.extend({\n    brphone(expected) {\n        return (value) => {\n            var validate = function (phone) {\n                if (!phone || typeof phone !== 'string') {\n                    return false;\n                }\n\n                if (/^[0-9]{10,11}$/.test(phone)) {\n                    return true;\n                }\n\n                return false;\n            };\n\n            return validate(value.replace(/[^0-9]/g, ''));\n        }\n    }\n});\n\nexport default v8n;\n"],"names":["v8n","extend","email","expected","value","validate","test","stringAlpha","s","fullname","v","vf","normalize","replace","passwordMatch","attrs","data","_typeof","a","f","f1","split","pop","join","cpf","mod11","num","not","x","isEqual","b","mergeDigits","num1","num2","getTwoLastDigits","getCpfToCheckInArray","substr","generateArray","length","Array","from","k","isIn","list","val","findIndex","isSameDigitsCPF","cpfFull","map","generateStringSequence","times","char","repeat","toSumOfMultiplication","total","result","i","getSumOfMultiplication","reduce","getValidationDigit","getDigit","isValidCPF","firstDigit","secondDigit","concat","CPF","cnpj","mod14","isSameDigitsCNPJ","cnpjFull","isValidCNPJ","tamanho","numeros","digitos","soma","pos","resultado","substring","charAt","CNPJ","creditcard","sumArrDigits","array","e","parseInt","validlen","arr","arrSplit","cardArray","selectOddValues","filter","selectEvenValues","arr1","arr2","isValidCC","cardNumber","toString","splitArr","checksum","c","creditcardValidTo","isValidDate","dateStr","m","y","cY","Date","getFullYear","cM","getMonth","renavam","padStart","match","renavamSemDigito","renavamReversoSemDigito","reverse","multiplicador","algarismo","ultimoDigitoCalculado","digitoRealInformado","brphone","phone"],"mappings":"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"}